import asyncio
import os
from telethon import TelegramClient, events
from telethon.errors import ForbiddenError
from telethon.sessions import StringSession
import logging
from dotenv import load_dotenv
import re
from typing import Iterable

load_dotenv()
STRING_SESSION = os.getenv("STRING_SESSION")
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename="job_bot.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

# –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: username, numeric ID
# TODO 1: –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏–∑ –≥—Ä—É–ø–ø
TARGET_CHATS = ["me", "https://t.me/+2FhJUyyxdjA3Mjky"]

# –ó–∞–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ª—é–±–æ–π –û–°
current_dir = os.path.dirname(os.path.abspath(__file__))
print(current_dir)
keyword_file_path = os.path.join(current_dir, "keywords.txt")
source_file_path = os.path.join(current_dir, "source_chats.txt")
target_file_path = os.path.join(current_dir, "target_chats.txt")

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
with open(keyword_file_path) as file:
    keywords = [line.strip() for line in file]

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
with open(source_file_path) as source:
    source_chats = [line.strip() for line in source]

with open(target_file_path) as target_file:
    target_chats = [line.strip() for line in target_file]

def search_key_in_text(text: str, key_list: Iterable[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ `text` —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ `keywords`.
    –ï—Å–ª–∏ –¥–∞ ‚Äî –ø–µ—á–∞—Ç–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.

    text ‚Äì –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π).
    key_list ‚Äì —Å–ø–∏—Å–æ–∫/–∫–æ—Ä—Ç–µ–∂/–ª—é–±–æ–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.

    –ü–æ–∏—Å–∫ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ —Å–ª–æ–≤–∞.
    """
    # –ì–æ—Ç–æ–≤–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∞ r"\b(?:—Å–ª–æ–≤–æ1|—Å–ª–æ–≤–æ2|...)\b"
    # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    escaped = map(re.escape, key_list)
    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ ¬´–∏–ª–∏¬ª
    pattern = r"\b(?:{})\b".format("|".join(escaped))
    if re.search(pattern, text, flags=re.IGNORECASE):
        print(text)
        return True
    return False


# –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
async def main() -> None:
    # —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–¥ + –ø–∞—Ä–æ–ª—å 2FA)
    async with TelegramClient(StringSession(os.getenv("STRING_SESSION")), API_ID, API_HASH) as client:
        if client.is_connected():
            print("Connected")
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        @client.on(events.NewMessage(chats=source_chats))
        async def forward_to_me(event: events.NewMessage.Event) -> None:
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ª—é–±–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí ¬´Saved Messages¬ª –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.
            –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (join/leave –∏ —Ç. –ø.) Telethon —Å—é–¥–∞ –Ω–µ —à–ª—ë—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            """
            message_id = event.message.id
            chat_name = event.chat.username
            message = event.message.message
            if search_key_in_text(message, keywords):
                print(message)
                for target in target_chats:
                    await event.message.forward_to(target)
                    # TODO 2: –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ª–æ–≥–æ–≤
                    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ {chat_name}")

        print("üöÄ Forwarder –∑–∞–ø—É—â–µ–Ω.")
        logging.info("Forwarder –∑–∞–ø—É—â–µ–Ω")
        await client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except ForbiddenError:
        logging.info("–ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
    except (KeyboardInterrupt, SystemExit):
        print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        logging.info("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
